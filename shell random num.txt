1.通过时间获得随机数（date)
date +%s
#获得时间戳，当前到：1970-01-01 00:00:00 相隔的秒数
#如果用它做随机数，相同一秒的数据是一样的。在做循环处理，多线程里面基本不能满足要求了。

date +%N
#获得当前时间的纳秒数据，精确到亿分之一秒。
#这个相当精确了，就算在多cpu，大量循环里面，同一秒里面，也很难出现相同结果，不过不同时间里面还会有大量重复碰撞

date +%s%N
#获得当前时间的纳秒数据，精确到亿分之一秒。
#这个相当精确了，就算在多cpu，大量循环里面，同一秒里面，也很难出现相同结果，不过不同时间里面还会有大量重复碰撞

2.通过内部系统变量($RANDOM)
echo $RANDOM
一个小于或等于5位的整数

3.通过系统内部唯一数据生成随机数（/dev/random,urandom)
head -200 /dev/urandom | cksum | cut -f1 -d" "
#由于urandom的数据是非常多，不能直接通过cat读取，这里取前200行，其实整个数据都是变化的，取多少也一样是唯一的。
#cksum 将读取文件内容，生成唯一的表示整型数据，只有文件内容不变，生成结果就不会变化,与php crc函数
#cut 以” “分割，然后得到分割的第一个字段数据

4.读取linux 的uuid码
cat /proc/sys/kernel/random/uuid| cksum | cut -f1 -d" "